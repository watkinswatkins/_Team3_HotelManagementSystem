{"version":3,"file":"angular-extensions-model.js","sources":["../../lib/model/model.ts","../../lib/model/angular-extensions-model.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nexport class Model<T> {\n  private _data: BehaviorSubject<T>;\n\n  data$: Observable<T>;\n\n  constructor(\n    initialData: any,\n    private immutable: boolean,\n    sharedSubscription: boolean,\n    private clone?: (data: T) => T\n  ) {\n    this._data = new BehaviorSubject(initialData);\n    this.data$ = this._data.asObservable().pipe(\n      map((data: T) =>\n        this.immutable\n          ? clone\n            ? clone(data)\n            : JSON.parse(JSON.stringify(data))\n          : data\n      ),\n      sharedSubscription\n        ? shareReplay({ bufferSize: 1, refCount: true })\n        : map((data: T) => data)\n    );\n  }\n\n  get(): T {\n    const data = this._data.getValue();\n    return this.immutable\n      ? this.clone\n        ? this.clone(data)\n        : JSON.parse(JSON.stringify(data))\n      : data;\n  }\n\n  set(data: T) {\n    if (this.immutable) {\n      const clone = this.clone\n        ? this.clone(data)\n        : JSON.parse(JSON.stringify(data));\n\n      this._data.next(clone);\n    } else {\n      this._data.next(data);\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModelFactory<T> {\n  create(initialData: T): Model<T> {\n    return new Model<T>(initialData, true, false);\n  }\n\n  createMutable(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, false);\n  }\n\n  createMutableWithSharedSubscription(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, true);\n  }\n\n  createWithCustomClone(initialData: T, clone: (data: T) => T) {\n    return new Model<T>(initialData, true, false, clone);\n  }\n\n  createWithConfig(config: {\n    initialData: T;\n    immutable: boolean;\n    sharedSubscription: boolean;\n    clone: (data: T) => T;\n  }) {\n    const { initialData, immutable, sharedSubscription, clone } = config;\n    return new Model<T>(initialData, immutable, sharedSubscription, clone);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './model';\n"],"names":[],"mappings":";;;;;MAIa,KAAK;IAKhB,YACE,WAAgB,EACR,SAAkB,EAC1B,kBAA2B,EACnB,KAAsB;QAFtB,cAAS,GAAT,SAAS,CAAS;QAElB,UAAK,GAAL,KAAK,CAAiB;QAE9B,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CACzC,GAAG,CAAC,CAAC,IAAO,KACV,IAAI,CAAC,SAAS;cACV,KAAK;kBACH,KAAK,CAAC,IAAI,CAAC;kBACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;cAClC,IAAI,CACT,EACD,kBAAkB;cACd,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;cAC9C,GAAG,CAAC,CAAC,IAAO,KAAK,IAAI,CAAC,CAC3B,CAAC;KACH;IAED,GAAG;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS;cACjB,IAAI,CAAC,KAAK;kBACR,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;kBAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;cAClC,IAAI,CAAC;KACV;IAED,GAAG,CAAC,IAAO;QACT,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;kBACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;kBAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAErC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;KACF;CACF;MAKY,YAAY;IACvB,MAAM,CAAC,WAAc;QACnB,OAAO,IAAI,KAAK,CAAI,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;KAC/C;IAED,aAAa,CAAC,WAAc;QAC1B,OAAO,IAAI,KAAK,CAAI,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAChD;IAED,mCAAmC,CAAC,WAAc;QAChD,OAAO,IAAI,KAAK,CAAI,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KAC/C;IAED,qBAAqB,CAAC,WAAc,EAAE,KAAqB;QACzD,OAAO,IAAI,KAAK,CAAI,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KACtD;IAED,gBAAgB,CAAC,MAKhB;QACC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QACrE,OAAO,IAAI,KAAK,CAAI,WAAW,EAAE,SAAS,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;KACxE;;;;YA5BF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;ACtDD;;;;;;"}