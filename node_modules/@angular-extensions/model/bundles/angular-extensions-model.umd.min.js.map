{"version":3,"sources":["../../lib/model/model.ts"],"names":["Model","initialData","immutable","sharedSubscription","clone","_this","this","_data","BehaviorSubject","data$","asObservable","pipe","map","data","JSON","parse","stringify","shareReplay","bufferSize","refCount","prototype","get","getValue","set","next","ModelFactory","create","createMutable","createMutableWithSharedSubscription","createWithCustomClone","createWithConfig","config","Injectable","args","providedIn"],"mappings":"+xBASE,SAAAA,EACEC,EACQC,EACRC,EACQC,GAJV,IAAAC,EAAAC,KAEUA,KAAAJ,UAAAA,EAEAI,KAAAF,MAAAA,EAERE,KAAKC,MAAQ,IAAIC,EAAAA,gBAAgBP,GACjCK,KAAKG,MAAQH,KAAKC,MAAMG,eAAeC,KACrCC,EAAAA,KAAI,SAACC,GACH,OAAAR,EAAKH,UACDE,EACEA,EAAMS,GACNC,KAAKC,MAAMD,KAAKE,UAAUH,IAC5BA,KAENV,EACIc,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,IACvCP,EAAAA,KAAI,SAACC,GAAY,OAAAA,aAIzBb,EAAAoB,UAAAC,IAAA,WACE,IAAMR,EAAOP,KAAKC,MAAMe,WACxB,OAAOhB,KAAKJ,UACRI,KAAKF,MACHE,KAAKF,MAAMS,GACXC,KAAKC,MAAMD,KAAKE,UAAUH,IAC5BA,GAGNb,EAAAoB,UAAAG,IAAA,SAAIV,GACF,GAAIP,KAAKJ,UAAW,CAClB,IAAME,EAAQE,KAAKF,MACfE,KAAKF,MAAMS,GACXC,KAAKC,MAAMD,KAAKE,UAAUH,IAE9BP,KAAKC,MAAMiB,KAAKpB,QAEhBE,KAAKC,MAAMiB,KAAKX,sBAQtB,SAAAY,YACEA,EAAAL,UAAAM,OAAA,SAAOzB,GACL,OAAO,IAAID,EAASC,GAAa,GAAM,IAGzCwB,EAAAL,UAAAO,cAAA,SAAc1B,GACZ,OAAO,IAAID,EAASC,GAAa,GAAO,IAG1CwB,EAAAL,UAAAQ,oCAAA,SAAoC3B,GAClC,OAAO,IAAID,EAASC,GAAa,GAAO,IAG1CwB,EAAAL,UAAAS,sBAAA,SAAsB5B,EAAgBG,GACpC,OAAO,IAAIJ,EAASC,GAAa,GAAM,EAAOG,IAGhDqB,EAAAL,UAAAU,iBAAA,SAAiBC,GAMP,IAAA9B,EAAsD8B,EAAM9B,YAA/CC,EAAyC6B,EAAM7B,UAApCC,EAA8B4B,EAAM5B,mBAAhBC,EAAU2B,EAAM3B,MACpE,OAAO,IAAIJ,EAASC,EAAaC,EAAWC,EAAoBC,wHA3BnE4B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nexport class Model<T> {\n  private _data: BehaviorSubject<T>;\n\n  data$: Observable<T>;\n\n  constructor(\n    initialData: any,\n    private immutable: boolean,\n    sharedSubscription: boolean,\n    private clone?: (data: T) => T\n  ) {\n    this._data = new BehaviorSubject(initialData);\n    this.data$ = this._data.asObservable().pipe(\n      map((data: T) =>\n        this.immutable\n          ? clone\n            ? clone(data)\n            : JSON.parse(JSON.stringify(data))\n          : data\n      ),\n      sharedSubscription\n        ? shareReplay({ bufferSize: 1, refCount: true })\n        : map((data: T) => data)\n    );\n  }\n\n  get(): T {\n    const data = this._data.getValue();\n    return this.immutable\n      ? this.clone\n        ? this.clone(data)\n        : JSON.parse(JSON.stringify(data))\n      : data;\n  }\n\n  set(data: T) {\n    if (this.immutable) {\n      const clone = this.clone\n        ? this.clone(data)\n        : JSON.parse(JSON.stringify(data));\n\n      this._data.next(clone);\n    } else {\n      this._data.next(data);\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModelFactory<T> {\n  create(initialData: T): Model<T> {\n    return new Model<T>(initialData, true, false);\n  }\n\n  createMutable(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, false);\n  }\n\n  createMutableWithSharedSubscription(initialData: T): Model<T> {\n    return new Model<T>(initialData, false, true);\n  }\n\n  createWithCustomClone(initialData: T, clone: (data: T) => T) {\n    return new Model<T>(initialData, true, false, clone);\n  }\n\n  createWithConfig(config: {\n    initialData: T;\n    immutable: boolean;\n    sharedSubscription: boolean;\n    clone: (data: T) => T;\n  }) {\n    const { initialData, immutable, sharedSubscription, clone } = config;\n    return new Model<T>(initialData, immutable, sharedSubscription, clone);\n  }\n}\n"]}